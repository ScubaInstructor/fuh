# Kibana/Elastic Setup 

# Add the following lines for more nodes between lines 46 and 47
# See for reference: https://github.com/elastic/elasticsearch/blob/8.17/docs/reference/setup/install/docker/docker-compose.yml
#   "  - name: es02\n"\
#          "    dns:\n"\
#          "      - es02\n"\
#          "      - localhost\n"\
#          "    ip:\n"\
#          "      - 127.0.0.1\n"\
#          "  - name: es03\n"\
#          "    dns:\n"\
#          "      - es03\n"\
#          "      - localhost\n"\
#          "    ip:\n"\
#          "      - 127.0.0.1\n"\
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./mapping.json:/usr/share/elasticsearch/mapping.json
      - ./sensor-api-key.txt:/usr/share/elasticsearch/sensor-api-key.txt
      - ./server-api-key.txt:/usr/share/elasticsearch/server-api-key.txt
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:${ES_PORT} | grep -q "missing authentication credentials"; do sleep 15; done;
        if [ ! -e /not_first_start ]; then
            touch /not_first_start
          echo "-- First container startup --"
          # YOUR_JUST_ONCE_LOGIC_HERE
          echo "Importing network_flow mapping";
          until curl -u elastic:${ELASTIC_PASSWORD} -X PUT "https://es01:${ES_PORT}/${NETWORK_FLOW_INDEX_NAME}" -H "Content-Type: application/json" -d @/usr/share/elasticsearch/mapping.json --insecure; do sleep 10; done;
          echo "Importing User";
          until curl -X PUT "https://es01:${ES_PORT}/_security/user/${NETWORK_ANALYST}" -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" -d "{ \"password\" : \"${NETWORK_ANALYST_PASSWORD}\" , \"roles\" : [\"dashboard_only\" , \"network_analyst\" ]}" --insecure; do sleep 10; done;
          echo "Writing api-token for ${NETWORK_FLOW_INDEX_NAME}" into file sensor-api-key.txt;
          until curl -X POST "https://es01:${ES_PORT}/_security/api_key" -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" --insecure -d "{
            \"name\": \"sensor_key_generated_from_setup\",  
            \"role_descriptors\": {
              \"sensor_add_flows\": {
                \"index\": [
                  {
                    \"names\": [\"${NETWORK_FLOW_INDEX_NAME}\"], 
                    \"privileges\": [ \"write\"]  
                  }
                ]
              }
            }
          }" | sed -e "s/.*encoded\":/KEY:/" | sed -e "s/}//" > /usr/share/elasticsearch/sensor-api-key.txt; do sleep 10; done;
          echo "Writing api-token for ${NETWORK_FLOW_INDEX_NAME}" into file server-api-key.txt;
          until curl -X POST "https://es01:${ES_PORT}/_security/api_key" -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" --insecure -d "{
            \"name\": \"server_key_generated_from_setup\",  
            \"role_descriptors\": {
              \"sensor_read_and_write_flows\": {
                \"index\": [
                  {
                    \"names\": [\"${NETWORK_FLOW_INDEX_NAME}\"], 
                    \"privileges\": [ \"read\", \"write\"]  
                  }
                ]
              }
            }
          }" | sed -e "s/.*encoded\":/KEY:/" | sed -e "s/}//" > /usr/share/elasticsearch/server-api-key.txt; do sleep 10; done;
          echo "All done!";
          echo "Use this api-key: $(cat /usr/share/elasticsearch/sensor-api-key.txt) for your sensors! ";
        else
          echo "-- Not the first container startup, so other initialisation is skipped  --"
        fi
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01 #,es02,es03 # Uncomment for extra nodes
      # Uncomment for extra nodes
      # - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:${ES_PORT} | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  # Uncomment for extra nodes
  # es02:
  #   depends_on:
  #     - es01
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #     - esdata02:/usr/share/elasticsearch/data
  #   environment:
  #     - node.name=es02
  #     - cluster.name=${CLUSTER_NAME}
  #     - cluster.initial_master_nodes=es01,es02,es03
  #     - discovery.seed_hosts=es01,es03
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #     - bootstrap.memory_lock=true
  #     - xpack.security.enabled=true
  #     - xpack.security.http.ssl.enabled=true
  #     - xpack.security.http.ssl.key=certs/es02/es02.key
  #     - xpack.security.http.ssl.certificate=certs/es02/es02.crt
  #     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.enabled=true
  #     - xpack.security.transport.ssl.key=certs/es02/es02.key
  #     - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
  #     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.verification_mode=certificate
  #     - xpack.license.self_generated.type=${LICENSE}
  #     - xpack.ml.use_auto_machine_memory_percent=true
  #   mem_limit: ${MEM_LIMIT}
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
  #       ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 120

  # es03:
  #   depends_on:
  #     - es02
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #     - esdata03:/usr/share/elasticsearch/data
  #   environment:
  #     - node.name=es03
  #     - cluster.name=${CLUSTER_NAME}
  #     - cluster.initial_master_nodes=es01,es02,es03
  #     - discovery.seed_hosts=es01,es02
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #     - bootstrap.memory_lock=true
  #     - xpack.security.enabled=true
  #     - xpack.security.http.ssl.enabled=true
  #     - xpack.security.http.ssl.key=certs/es03/es03.key
  #     - xpack.security.http.ssl.certificate=certs/es03/es03.crt
  #     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.enabled=true
  #     - xpack.security.transport.ssl.key=certs/es03/es03.key
  #     - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
  #     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.verification_mode=certificate
  #     - xpack.license.self_generated.type=${LICENSE}
  #     - xpack.ml.use_auto_machine_memory_percent=true
  #   mem_limit: ${MEM_LIMIT}
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
  #       ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 120

  # kibana:
  #   depends_on:
  #     es01:
  #       condition: service_healthy
  #     # Uncomment for extra nodes
  #     # es02:
  #     #   condition: service_healthy
  #     # es03:
  #     #   condition: service_healthy
  #   image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
  #   volumes:
  #     - certs:/usr/share/kibana/config/certs
  #     - ./kibana_certs:/usr/share/kibana/config/kibana_certs
  #     - kibanadata:/usr/share/kibana/data
  #   ports:
  #     - ${KIBANA_PORT}:5601
  #   environment:
  #     - SERVERNAME=kibana
  #     - SERVER_SSL_ENABLED=true
  #     - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/kibana_certs/kibana.crt
  #     - SERVER_SSL_KEY=/usr/share/kibana/config/kibana_certs/kibana.key
  #     - ELASTICSEARCH_HOSTS=https://es01:9200
  #     - ELASTICSEARCH_USERNAME=kibana_system
  #     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
  #     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
  #   mem_limit: ${MEM_LIMIT}
  #   healthcheck:
  #     test: ["CMD", "curl", "-k", "-f", "https://localhost:5601/api/status"]
  #     interval: 30s
  #     retries: 3
  #     start_period: 10s
  #     timeout: 10s

  # packetbeat:
  #   depends_on:
  #     es01:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_healthy
  #   image: docker.elastic.co/beats/packetbeat:${STACK_VERSION}
  #   container_name: packetbeat
  #   user: root
  #   cap_add: 
  #     - NET_ADMIN
  #     - NET_RAW
  #   volumes:
  #     - certs:/usr/share/packetbeat/certs:ro
  #     - ./packetbeat.yml:/usr/share/packetbeat/packetbeat.yml:ro
  #     - ./pcap_folder:/usr/share/packetbeat/pcaps:ro
  #   command: ["packetbeat", "setup", "e"]
  #   #command: ["packetbeat", "-t", "-I", "/usr/share/packetbeat/pcaps/test.pcap", "-c", "/usr/share/packetbeat/packetbeat.yml", "-e"]
  #   environment:
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #     - ELASTICSEARCH_HOSTS=https://es01:9200
  #     - ELASTICSEARCH_USERNAME=elastic
  #     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/packetbeat/certs/ca/ca.crt
  #     - KIBANA_HOST=https://kibana:5601
  #     - KIBANA_SSL_CERTIFICATEAUTHORITIES=/usr/share/packetbeat/certs/ca/ca.crt

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  # Uncomment for more nodes
  # esdata02:
  #   driver: local
  # esdata03:
  #   driver: local
  # kibanadata:
  #   driver: local